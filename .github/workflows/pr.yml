name: PR

on:
  pull_request:
    paths-ignore:
      - 'ci/**'
      - '**/*.md'

env:
  IMAGE_NAME: docker-ecr-ap-base-image

jobs:
  docker-build-and-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest . -q
        working-directory: build
      - name: Run Snyk monitoring
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          image: ${{ env.IMAGE_NAME }}
          args: --file=./build/Dockerfile --severity-threshold=high --exclude-base-image-vulns --policy-path=./build/.snyk --org=dwp-dataworks -d

  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Black
        run: pip install black

      - name: Run black --check .
        id: check-formatting
        run: black --check .
        continue-on-error: true

      - name: If needed, commit black changes to the pull request
        if: ${{ steps.check-formatting.outcome == 'failure' }}
        run: |
          black .
          git config --global user.name ${{ secrets.CI_GITHUB_USERNAME }}
          git config --global user.email ${{ secrets.CI_GITHUB_EMAIL }}
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am "Fixup: Format Python code with Black"
          git push

  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:
      - name: Prepare SemVer
        id: prepare-semver
        run: |
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          echo ::set-output name=latest_version_out::$LATEST_VERSION
          commit_message="${{ github.event.head_commit.message }}"
          if [[ "${commit_message,,}" == *"major release"* ]]; then
            echo ::set-output name=semver_increment::"m"
          elif [[ "${commit_message,,}" == *"minor release"* ]]; then
            echo ::set-output name=semver_increment::"i"
          else
            echo ::set-output name=semver_increment::"p"
          fi
      - name: Increment SemVer
        id: semver
        uses: matt-FFFFFF/simple-semver@v0.1.0
        with:
          semver-input: ${{ steps.prepare-semver.outputs.latest_version_out }}
          increment: ${{ steps.prepare-semver.outputs.semver_increment }}
      - name: Get publish version
        id: get-publish-version
        run: echo "::set-output name=publish-version::${{ steps.semver.outputs.semver }}"

  publish-docker:
    runs-on: ubuntu-latest
    needs: get-publish-version
    steps:
      - uses: actions/checkout@master
      - name: Get release version
        id: get_version
        run: echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
      - name: Build Docker Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY}}
          AWS_SESSION_TOKEN: ${{ secrets.ECR_AWS_SESSION_TOKEN }}
          AWS_ACCOUNT: ${{ secrets.ECR_AWS_ACCOUNT }}
          DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_ECR_AWS_ACCESS_KEY_ID }}
          DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_ECR_AWS_SECRET_ACCESS_KEY}}
          DEV_AWS_SESSION_TOKEN: ${{ secrets.DEV_ECR_AWS_SESSION_TOKEN }}
          DEV_AWS_ACCOUNT: ${{ secrets.DEV_ECR_AWS_ACCOUNT }}
          ECR_REQUIREMENTS: ${{ secrets.ECR_REQUIREMENTS }}
          AWS_REGION: eu-west-2
          SEM_VER: "${{ needs.get-publish-version.outputs.publish-version }}"
        run:
          export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN ;
          export DEV_AWS_ACCESS_KEY_ID DEV_AWS_SECRET_ACCESS_KEY DEV_AWS_SESSION_TOKEN ; 
          export AWS_REGION AWS_ACCOUNT DEV_AWS_ACCOUNT ;
          export ECR_REQUIREMENTS ;
          ls -al ;
          ./build_and_push_to_ecr.sh
        working-directory: build

